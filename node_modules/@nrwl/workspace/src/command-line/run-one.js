"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runOne = void 0;
const tslib_1 = require("tslib");
const run_command_1 = require("../tasks-runner/run-command");
const project_graph_1 = require("../core/project-graph");
const file_utils_1 = require("../core/file-utils");
const run_one_reporter_1 = require("../tasks-runner/run-one-reporter");
const utils_1 = require("./utils");
const connect_to_nx_cloud_1 = require("./connect-to-nx-cloud");
const perf_hooks_1 = require("perf_hooks");
function runOne(opts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        perf_hooks_1.performance.mark('command-execution-begins');
        perf_hooks_1.performance.measure('code-loading', 'init-local', 'command-execution-begins');
        const { nxArgs, overrides } = utils_1.splitArgsIntoNxArgsAndOverrides(Object.assign(Object.assign({}, opts.parsedArgs), { configuration: opts.configuration, target: opts.target }), 'run-one');
        yield connect_to_nx_cloud_1.connectToNxCloudUsingScan(nxArgs.scan);
        const projectGraph = yield project_graph_1.createProjectGraphAsync('4.0');
        const { projects, projectsMap } = getProjects(projectGraph, opts.project);
        const env = file_utils_1.readEnvironment(opts.target, projectsMap);
        const reporter = new run_one_reporter_1.RunOneReporter(opts.project);
        run_command_1.runCommand(projects, projectGraph, env, nxArgs, overrides, reporter, opts.project);
    });
}
exports.runOne = runOne;
function getProjects(projectGraph, project) {
    let projects = [projectGraph.nodes[project]];
    let projectsMap = {
        [project]: projectGraph.nodes[project],
    };
    return { projects, projectsMap };
}
//# sourceMappingURL=run-one.js.map