"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.startInCurrentProcess = exports.startInBackground = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const app_root_1 = require("@nrwl/tao/src/utils/app-root");
const child_process_1 = require("child_process");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const tmp_1 = require("tmp");
const cache_1 = require("../cache");
const server_1 = require("../server");
function startInBackground() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /**
         * For now, while the daemon is an opt-in feature, we will log to stdout when
         * starting the server, as well as providing a reference to where any subsequent
         * log files can be found.
         */
        const tmpDirPrefix = `nx-daemon--${app_root_1.appRootPath.replace(
        // Replace the occurrences of / on unix systems, the \ on windows, with a -
        new RegExp(escapeRegExp(path_1.sep), 'g'), '-')}`;
        const serverLogOutputDir = tmp_1.dirSync({
            prefix: tmpDirPrefix,
        }).name;
        const serverLogOutputFile = path_1.join(serverLogOutputDir, 'nx-daemon.log');
        fs_extra_1.ensureFileSync(serverLogOutputFile);
        // Clean up any existing orphaned background process before creating a new one
        const cachedDaemonJson = yield cache_1.readDaemonJsonCache();
        if (cachedDaemonJson) {
            if (cachedDaemonJson.backgroundProcessId) {
                process.kill(cachedDaemonJson.backgroundProcessId);
            }
        }
        devkit_1.logger.info(`NX Daemon Server - Starting in a background process...`);
        devkit_1.logger.log(`  Logs from the Daemon process can be found here: ${serverLogOutputFile}\n`);
        try {
            const backgroundProcess = child_process_1.spawn('node', ['./start.js', serverLogOutputFile], {
                cwd: __dirname,
                stdio: 'ignore',
                detached: true,
            });
            backgroundProcess.unref();
            // Persist metadata about the background process so that it can be cleaned up later if needed
            const daemonJson = {
                backgroundProcessId: backgroundProcess.pid,
                serverLogOutputFile: serverLogOutputFile,
            };
            yield cache_1.writeDaemonJsonCache(daemonJson);
            /**
             * Ensure the server is actually available to connect to via IPC before resolving
             */
            return new Promise((resolve) => {
                const id = setInterval(() => {
                    if (server_1.isServerAvailable()) {
                        clearInterval(id);
                        resolve();
                    }
                }, 500);
            });
        }
        catch (err) {
            devkit_1.logger.error(err);
            process.exit(1);
        }
    });
}
exports.startInBackground = startInBackground;
function startInCurrentProcess() {
    devkit_1.logger.info(`NX Daemon Server - Starting in the current process...`);
    child_process_1.spawnSync('node', ['./start.js'], {
        cwd: __dirname,
        stdio: 'inherit',
    });
}
exports.startInCurrentProcess = startInCurrentProcess;
function stop() {
    devkit_1.logger.info(`NX Daemon Server - Stopping...`);
    child_process_1.spawnSync('node', ['./stop.js'], {
        cwd: __dirname,
        stdio: 'inherit',
    });
}
exports.stop = stop;
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
//# sourceMappingURL=index.js.map